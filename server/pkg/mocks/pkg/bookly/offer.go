// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bookly/offer.go

// Package mock_bookly is a generated GoMock package.
package mock_bookly

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bookly "github.com/pw-software-engineering/b-team/server/pkg/bookly"
)

// MockOfferStorage is a mock of OfferStorage interface.
type MockOfferStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOfferStorageMockRecorder
}

// MockOfferStorageMockRecorder is the mock recorder for MockOfferStorage.
type MockOfferStorageMockRecorder struct {
	mock *MockOfferStorage
}

// NewMockOfferStorage creates a new mock instance.
func NewMockOfferStorage(ctrl *gomock.Controller) *MockOfferStorage {
	mock := &MockOfferStorage{ctrl: ctrl}
	mock.recorder = &MockOfferStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferStorage) EXPECT() *MockOfferStorageMockRecorder {
	return m.recorder
}

// CreateOffer mocks base method.
func (m *MockOfferStorage) CreateOffer(ctx context.Context, offer *bookly.Offer, hotelID int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", ctx, offer, hotelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockOfferStorageMockRecorder) CreateOffer(ctx, offer, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockOfferStorage)(nil).CreateOffer), ctx, offer, hotelID)
}

// GetAllOffers mocks base method.
func (m *MockOfferStorage) GetAllOffers(ctx context.Context, hotelID int) ([]*bookly.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOffers", ctx, hotelID)
	ret0, _ := ret[0].([]*bookly.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOffers indicates an expected call of GetAllOffers.
func (mr *MockOfferStorageMockRecorder) GetAllOffers(ctx, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOffers", reflect.TypeOf((*MockOfferStorage)(nil).GetAllOffers), ctx, hotelID)
}

// UpdateOfferStatus mocks base method.
func (m *MockOfferStorage) UpdateOfferStatus(ctx context.Context, offerID int64, isActive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfferStatus", ctx, offerID, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOfferStatus indicates an expected call of UpdateOfferStatus.
func (mr *MockOfferStorageMockRecorder) UpdateOfferStatus(ctx, offerID, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfferStatus", reflect.TypeOf((*MockOfferStorage)(nil).UpdateOfferStatus), ctx, offerID, isActive)
}

// MockOfferService is a mock of OfferService interface.
type MockOfferService struct {
	ctrl     *gomock.Controller
	recorder *MockOfferServiceMockRecorder
}

// MockOfferServiceMockRecorder is the mock recorder for MockOfferService.
type MockOfferServiceMockRecorder struct {
	mock *MockOfferService
}

// NewMockOfferService creates a new mock instance.
func NewMockOfferService(ctrl *gomock.Controller) *MockOfferService {
	mock := &MockOfferService{ctrl: ctrl}
	mock.recorder = &MockOfferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferService) EXPECT() *MockOfferServiceMockRecorder {
	return m.recorder
}

// HandleCreateOffer mocks base method.
func (m *MockOfferService) HandleCreateOffer(ctx context.Context, offer *bookly.Offer, hotelToken string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateOffer", ctx, offer, hotelToken)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCreateOffer indicates an expected call of HandleCreateOffer.
func (mr *MockOfferServiceMockRecorder) HandleCreateOffer(ctx, offer, hotelToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateOffer", reflect.TypeOf((*MockOfferService)(nil).HandleCreateOffer), ctx, offer, hotelToken)
}
