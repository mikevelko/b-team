// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bookly/hotel.go

// Package mock_bookly is a generated GoMock package.
package mock_bookly

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bookly "github.com/pw-software-engineering/b-team/server/pkg/bookly"
)

// MockHotelStorage is a mock of HotelStorage interface.
type MockHotelStorage struct {
	ctrl     *gomock.Controller
	recorder *MockHotelStorageMockRecorder
}

// MockHotelStorageMockRecorder is the mock recorder for MockHotelStorage.
type MockHotelStorageMockRecorder struct {
	mock *MockHotelStorage
}

// NewMockHotelStorage creates a new mock instance.
func NewMockHotelStorage(ctrl *gomock.Controller) *MockHotelStorage {
	mock := &MockHotelStorage{ctrl: ctrl}
	mock.recorder = &MockHotelStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelStorage) EXPECT() *MockHotelStorageMockRecorder {
	return m.recorder
}

// CreateHotel mocks base method.
func (m *MockHotelStorage) CreateHotel(ctx context.Context, hotel bookly.Hotel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHotel", ctx, hotel)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHotel indicates an expected call of CreateHotel.
func (mr *MockHotelStorageMockRecorder) CreateHotel(ctx, hotel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHotel", reflect.TypeOf((*MockHotelStorage)(nil).CreateHotel), ctx, hotel)
}

// GetHotelDetails mocks base method.
func (m *MockHotelStorage) GetHotelDetails(ctx context.Context, hotelID int64) (*bookly.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelDetails", ctx, hotelID)
	ret0, _ := ret[0].(*bookly.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelDetails indicates an expected call of GetHotelDetails.
func (mr *MockHotelStorageMockRecorder) GetHotelDetails(ctx, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelDetails", reflect.TypeOf((*MockHotelStorage)(nil).GetHotelDetails), ctx, hotelID)
}

// GetHotelPreviews mocks base method.
func (m *MockHotelStorage) GetHotelPreviews(ctx context.Context, filter bookly.HotelFilter) ([]*bookly.HotelListing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelPreviews", ctx, filter)
	ret0, _ := ret[0].([]*bookly.HotelListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelPreviews indicates an expected call of GetHotelPreviews.
func (mr *MockHotelStorageMockRecorder) GetHotelPreviews(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelPreviews", reflect.TypeOf((*MockHotelStorage)(nil).GetHotelPreviews), ctx, filter)
}

// UpdateHotelDetails mocks base method.
func (m *MockHotelStorage) UpdateHotelDetails(ctx context.Context, hotelID int64, newHotel bookly.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotelDetails", ctx, hotelID, newHotel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotelDetails indicates an expected call of UpdateHotelDetails.
func (mr *MockHotelStorageMockRecorder) UpdateHotelDetails(ctx, hotelID, newHotel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotelDetails", reflect.TypeOf((*MockHotelStorage)(nil).UpdateHotelDetails), ctx, hotelID, newHotel)
}

// MockHotelService is a mock of HotelService interface.
type MockHotelService struct {
	ctrl     *gomock.Controller
	recorder *MockHotelServiceMockRecorder
}

// MockHotelServiceMockRecorder is the mock recorder for MockHotelService.
type MockHotelServiceMockRecorder struct {
	mock *MockHotelService
}

// NewMockHotelService creates a new mock instance.
func NewMockHotelService(ctrl *gomock.Controller) *MockHotelService {
	mock := &MockHotelService{ctrl: ctrl}
	mock.recorder = &MockHotelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelService) EXPECT() *MockHotelServiceMockRecorder {
	return m.recorder
}

// GetHotelDetails mocks base method.
func (m *MockHotelService) GetHotelDetails(ctx context.Context, hotelID int64) (*bookly.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelDetails", ctx, hotelID)
	ret0, _ := ret[0].(*bookly.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelDetails indicates an expected call of GetHotelDetails.
func (mr *MockHotelServiceMockRecorder) GetHotelDetails(ctx, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelDetails", reflect.TypeOf((*MockHotelService)(nil).GetHotelDetails), ctx, hotelID)
}

// GetHotelPreviews mocks base method.
func (m *MockHotelService) GetHotelPreviews(ctx context.Context, filter bookly.HotelFilter) ([]*bookly.HotelListing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelPreviews", ctx, filter)
	ret0, _ := ret[0].([]*bookly.HotelListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelPreviews indicates an expected call of GetHotelPreviews.
func (mr *MockHotelServiceMockRecorder) GetHotelPreviews(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelPreviews", reflect.TypeOf((*MockHotelService)(nil).GetHotelPreviews), ctx, filter)
}

// UpdateHotelDetails mocks base method.
func (m *MockHotelService) UpdateHotelDetails(ctx context.Context, hotelID int64, newHotel bookly.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotelDetails", ctx, hotelID, newHotel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotelDetails indicates an expected call of UpdateHotelDetails.
func (mr *MockHotelServiceMockRecorder) UpdateHotelDetails(ctx, hotelID, newHotel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotelDetails", reflect.TypeOf((*MockHotelService)(nil).UpdateHotelDetails), ctx, hotelID, newHotel)
}
