// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bookly/room.go

// Package mock_bookly is a generated GoMock package.
package mock_bookly

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bookly "github.com/pw-software-engineering/b-team/server/pkg/bookly"
)

// MockRoomStorage is a mock of RoomStorage interface.
type MockRoomStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRoomStorageMockRecorder
}

// MockRoomStorageMockRecorder is the mock recorder for MockRoomStorage.
type MockRoomStorageMockRecorder struct {
	mock *MockRoomStorage
}

// NewMockRoomStorage creates a new mock instance.
func NewMockRoomStorage(ctrl *gomock.Controller) *MockRoomStorage {
	mock := &MockRoomStorage{ctrl: ctrl}
	mock.recorder = &MockRoomStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomStorage) EXPECT() *MockRoomStorageMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomStorage) CreateRoom(ctx context.Context, room bookly.Room, hotelID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, room, hotelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomStorageMockRecorder) CreateRoom(ctx, room, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomStorage)(nil).CreateRoom), ctx, room, hotelID)
}

// DeleteRoom mocks base method.
func (m *MockRoomStorage) DeleteRoom(ctx context.Context, roomID, hotelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, roomID, hotelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomStorageMockRecorder) DeleteRoom(ctx, roomID, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomStorage)(nil).DeleteRoom), ctx, roomID, hotelID)
}

// GetAllHotelRooms mocks base method.
func (m *MockRoomStorage) GetAllHotelRooms(ctx context.Context, hotelID int64) ([]*bookly.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHotelRooms", ctx, hotelID)
	ret0, _ := ret[0].([]*bookly.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHotelRooms indicates an expected call of GetAllHotelRooms.
func (mr *MockRoomStorageMockRecorder) GetAllHotelRooms(ctx, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHotelRooms", reflect.TypeOf((*MockRoomStorage)(nil).GetAllHotelRooms), ctx, hotelID)
}

// GetRoom mocks base method.
func (m *MockRoomStorage) GetRoom(ctx context.Context, roomNumber string, hotelID int64) (bookly.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, roomNumber, hotelID)
	ret0, _ := ret[0].(bookly.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockRoomStorageMockRecorder) GetRoom(ctx, roomNumber, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockRoomStorage)(nil).GetRoom), ctx, roomNumber, hotelID)
}

// MockRoomService is a mock of RoomService interface.
type MockRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServiceMockRecorder
}

// MockRoomServiceMockRecorder is the mock recorder for MockRoomService.
type MockRoomServiceMockRecorder struct {
	mock *MockRoomService
}

// NewMockRoomService creates a new mock instance.
func NewMockRoomService(ctrl *gomock.Controller) *MockRoomService {
	mock := &MockRoomService{ctrl: ctrl}
	mock.recorder = &MockRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomService) EXPECT() *MockRoomServiceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomService) CreateRoom(ctx context.Context, room bookly.Room, hotelID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, room, hotelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomServiceMockRecorder) CreateRoom(ctx, room, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomService)(nil).CreateRoom), ctx, room, hotelID)
}

// DeleteRoom mocks base method.
func (m *MockRoomService) DeleteRoom(ctx context.Context, roomID, hotelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, roomID, hotelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockRoomServiceMockRecorder) DeleteRoom(ctx, roomID, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRoomService)(nil).DeleteRoom), ctx, roomID, hotelID)
}

// GetAllHotelRooms mocks base method.
func (m *MockRoomService) GetAllHotelRooms(ctx context.Context, hotelID int64, pageNumber, pageSize int, filter string) ([]*bookly.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHotelRooms", ctx, hotelID, pageNumber, pageSize, filter)
	ret0, _ := ret[0].([]*bookly.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHotelRooms indicates an expected call of GetAllHotelRooms.
func (mr *MockRoomServiceMockRecorder) GetAllHotelRooms(ctx, hotelID, pageNumber, pageSize, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHotelRooms", reflect.TypeOf((*MockRoomService)(nil).GetAllHotelRooms), ctx, hotelID, pageNumber, pageSize, filter)
}
